// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalculatePoint
#pragma kernel CalculateNormal

struct WaveOptions{
	uint type;

	float2 position;

	float2 size;

	uint state;

	float stateTimeChange;

	float amplitude;

	float radius;

	float smooth;

	float waveNumber;

	float angularFrequency;

	float waveSpeed;

	float timeProgression;

	float time;

	float timeout;
};

struct FrameOptions{
	float time;
	uint nbWaves;
	float maxWaveHeight;
	uint lod;
	float ratio;
	uint heigthMapRatio;
	float2 trash;
};

StructuredBuffer<WaveOptions> Impacts;
StructuredBuffer<FrameOptions> Options;
RWStructuredBuffer<float> Result;
RWTexture2D<float4> HeightMap;

int lod;
float currentTime;
float wt;
float2 heightInfo;

void MakeImpact(uint i, WaveOptions wave, float offsetMagnitude, float posAbs, float coeff, float constantWave){
	float theta = (wave.waveNumber * (offsetMagnitude / lod));
	float x = currentTime / (1 / (1 + wave.waveSpeed)) + posAbs;
	float timeProgress = wave.amplitude * sin(x) * lerp(1/x, 1, constantWave);
	float sinTheta = sin(theta* timeProgress) / exp(abs(posAbs) * wave.timeProgression);

	float heightAbs = abs(sinTheta);
	heightInfo = heightInfo + float2(sinTheta * (heightAbs/ coeff), (heightAbs / coeff));
}

void MakeZone(uint i, WaveOptions wave, float offset, float coeff){
	float sinTheta = wave.amplitude * sin((wave.waveNumber * (offset / lod)) - wt);
	float heightAbs = abs(sinTheta);
	heightInfo = heightInfo + float2(sinTheta * (heightAbs/ coeff), (heightAbs / coeff));
}

void MakeVortex(uint i, WaveOptions wave, float offsetMagnitude, float posAbs, float coeff){
	float theta = (wave.waveNumber/* * (4 / wave.radius)*/ * (offsetMagnitude / lod));
	float x = currentTime - posAbs;
	float timeProgress = wave.amplitude * sin(x);
	float sinTheta = sin(theta * timeProgress);
	sinTheta += wave.amplitude * (exp((posAbs - wave.radius) / wave.smooth)  - 1);

	float heightAbs = abs(sinTheta);
	heightInfo = heightInfo + float2(sinTheta * (heightAbs/ coeff), (heightAbs / coeff));
}

[numthreads(32,32,1)]
void CalculatePoint (uint3 id : SV_DispatchThreadID)
{
	heightInfo = float2(0, 0);
	lod = Options[0].lod;

	int pointId = id.x * lod + id.y;

	for(uint i = 0; i < Options[0].nbWaves; i++){
		float2 offset = float2(Impacts[i].position.x - id.x, Impacts[i].position.y - id.y);
		WaveOptions wave = Impacts[i];

		wave.amplitude = Options[0].ratio * Impacts[i].amplitude;
		wave.radius = Options[0].ratio * Impacts[i].radius;
		wave.smooth = Options[0].ratio * Impacts[i].smooth * 10;
		wave.waveSpeed = Options[0].ratio * Impacts[i].waveSpeed;
		wave.timeProgression = Options[0].ratio * Impacts[i].timeProgression;

		wave.waveNumber = Impacts[i].waveNumber / (Options[0].ratio * 10);
		wave.angularFrequency = Impacts[i].angularFrequency / Options[0].ratio;
		
		currentTime = wave.time - Options[0].time;
		wt = wave.angularFrequency * currentTime;
		
		if(wave.type == 0){
			float offsetMagnitude = distance(float2(0, 0), offset);
			float posAbs = abs(offsetMagnitude);

			if(posAbs < wave.radius){
				heightInfo = float2(0, 1);
				break;
			}

			posAbs = posAbs - wave.radius;
			offsetMagnitude = posAbs * sign(offsetMagnitude);
			float coeff = (2 + posAbs);
			
			MakeImpact(i, wave, offsetMagnitude, posAbs, coeff, 0);
		}
		else if(wave.type == 1){
			if((abs(offset.x) < wave.size.x) && (abs(offset.y) < wave.size.y)){
				heightInfo = float2(0, 1);
				break;
			}

			float newOffsetX = clamp(offset.x, - wave.size.x, wave.size.x);
			float newOffsetY = clamp(offset.y, - wave.size.y, wave.size.y);

			float offsetMagnitude = distance(float2(newOffsetX, newOffsetY), offset);
			float posAbs = abs(offsetMagnitude);
			float coeff = (2 + posAbs);

			MakeImpact(i, wave, offsetMagnitude, posAbs, coeff, 1);
		}
		else if(wave.type == 2){
			float offsetMagnitude = distance(float2(0, 0), offset);
			float posAbs = abs(offsetMagnitude);
			float coeff = (2 + posAbs);

			MakeZone(i, wave, offset.x, coeff);
		}
		else if(wave.type == 3){
			float offsetMagnitude = distance(float2(0, 0), offset);
			float posAbs = abs(offsetMagnitude);
			float coeff = (2 + posAbs);

			MakeZone(i, wave, offsetMagnitude, coeff);
		}
		else if(wave.type == 4){
			float offsetMagnitude = distance(float2(0, 0), offset);
			float posAbs = abs(offsetMagnitude);
			float coeff = (2 + posAbs);

			if(posAbs < wave.radius){
				MakeVortex(i, wave, offsetMagnitude, posAbs, coeff);
				break;
			}

			posAbs = posAbs - wave.radius;
			offsetMagnitude = posAbs * sign(offsetMagnitude);
			coeff = (2 + posAbs);
			
			MakeImpact(i, wave, offsetMagnitude, -posAbs, coeff, 1);
		}
		
	}

	if(heightInfo.y == 0){
		Result[pointId] = 0;
	}
	else{
		Result[pointId] = heightInfo.x / heightInfo.y;
	}

	float textureHeight = (clamp(Result[pointId], -Options[0].maxWaveHeight, Options[0].maxWaveHeight) / (Options[0].maxWaveHeight * 2)) + 0.5;
	// float textureHeight = 0.5;

	// for(uint l = (id.x * Options[0].heigthMapRatio); l < ((id.x + 1) * Options[0].heigthMapRatio); l++){
	// 	for(uint k = (id.y * Options[0].heigthMapRatio); k < ((id.y + 1) * Options[0].heigthMapRatio); k++){
	// 		HeightMap[int2(l, k)] = float4(textureHeight, textureHeight, textureHeight, 1);
	// 	}
	// }

	HeightMap[int2(id.x, id.y)] = float4(textureHeight, textureHeight, textureHeight, 1);
}

RWStructuredBuffer<float3> Normales;
RWTexture2D<float4> NormaleMap;

[numthreads(32,32,1)]
void CalculateNormal (uint3 id : SV_DispatchThreadID)
{
	int lod = Options[0].lod;

	int pointId = id.x * lod + id.y;

	int2 directions[4] = {int2(-1, 0), int2(1, 0), int2(0, -1), int2(0, 1)};

	int2 neighboursIds[4];
	float3 vertex[4];

	for(int i = 0; i < 4; i++){
		neighboursIds[i].x = min(max(0, id.x + directions[i].x), lod - 1);
		neighboursIds[i].y = min(max(0, id.y + directions[i].y), lod - 1);
	}

	float z1 = Result[neighboursIds[1].x * lod + neighboursIds[1].y] - Result[neighboursIds[0].x * lod + neighboursIds[0].y];
	float z2 = Result[neighboursIds[3].x * lod + neighboursIds[3].y] - Result[neighboursIds[2].x * lod + neighboursIds[2].y];

	Normales[pointId] = -normalize(cross(float3(1, z1, 0), float3(0, z2, 1)));

	// for(uint l = (id.x * Options[0].heigthMapRatio); l < ((id.x + 1) * Options[0].heigthMapRatio); l++){
	// 	for(uint k = (id.y * Options[0].heigthMapRatio); k < ((id.y + 1) * Options[0].heigthMapRatio); k++){
	// 		NormaleMap[int2(l, k)] = float4((z2+1)/2, (z1+1)/2, 1, 1);
	// 		// NormaleMap[int2(l, k)] = float4(0, 1, 0, 1);
	// 	}
	// }

	NormaleMap[int2(id.x, id.y)] = float4((z2+1)/2, (z1+1)/2, 1, 1);
}